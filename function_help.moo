@create $generic_help named ToastStunt Help Database:ToastStunt Help Database,Help Database,Database,Help,ToastStunt
@prop #123."binary_hmac" {} rc
;;#123.("binary_hmac") = {"Syntax:  string_hmac (STR text, STR key [, STR algo [, binary]])", "         binary_hmac (STR bin-string, STR key [, STR algo [, binary]])", "", "Returns a string encoding the result of applying the HMAC-SHA256 cryptographically secure HMAC function to the contents of the string text or the binary string bin-string with the specified secret key. If algo is provided, it specifies the hashing algorithm to use. Currently, only \"SHA1\" and \"SHA256\" are supported. If binary is provided and true, the result is in MOO binary string format; by default the result is a hexidecimal string.", "", "All cryptographically secure HMACs have the property that, if string_hmac(x, a) == string_hmac(y, b) then, almost certainly, equal(x, y) and furthermore, equal(a, b)", "", " This can be useful, for example, in applications that need to verify both the integrity of the message (the text) and the authenticity of the sender (as demonstrated by the possession of the secret key)."}
@prop #123."string_hmac" {} rc
;;#123.("string_hmac") = {"*forward*", "binary_hmac"}
@prop #123."decode_base64" {} rc
;;#123.("decode_base64") = {"Syntax:  decode_base64 (STR base64 [, safe])", "", "Returns the binary string representation of the supplied Base64 encoded string argument. Raises E_INVARG if base64 is not a properly-formed Base64 string. If safe is provide and is true, a URL-safe version of Base64 is used (see RFC4648).", "", "decode_base64(\"AAEC\")       =>   \"~00~01~02\"", "decode_base64(\"AAE\", 1)     =>   \"~00~01\""}
@prop #123."encode_base64" {} rc
;;#123.("encode_base64") = {"Syntax:  encode_base64 (STR binary [, safe])", "", "Returns the Base64 encoded string representation of the supplied binary string argument. Raises E_INVARG if binary is not a properly-formed binary string. If safe is provide and is true, a URL-safe version of Base64 is used (see RFC4648).", "", "encode_base64(\"~00~01~02\")     =>   \"AAEC\"", "encode_base64(\"~00~01\", 1)     =>   \"AAE\""}
@prop #123."exec" {} rc
;;#123.("exec") = {"Syntax: exec (LIST command[, STR input][, LIST environment variables])", "", "Asynchronously executes the specified external executable, optionally sending input. Returns the process return code, output and error. If the programmer is not a wizard, then E_PERM is raised.", "", "The first argument must be a list of strings, or E_INVARG is raised. The first string is the path to the executable and is required. The rest are command line arguments passed to the executable.", "", "The path to the executable may not start with a slash (/) or dot-dot (..), and it may not contain slash-dot (/.) or dot-slash (./), or E_INVARG is raised. If the specified executable does not exist or is not a regular file, E_INVARG is raised.", "", "If the string input is present, it is written to standard input of the executing process.", "", "Additionally, you can provide a list of environment variables to set in the shell.", "", "When the process exits, it returns a list of the form:", "", "{code, output, error}", "", "code is the integer process exit status or return code. output and error are strings of data that were written to the standard output and error of the process.", "", "The specified command is executed asynchronously. The function suspends the current task and allows other tasks to run until the command finishes. Tasks suspended this way can be killed with kill_task().", "", "The strings, input, output and error are all MOO binary strings.", "", "All external executables must reside in the executables directory.", "", "exec({\"cat\", \"-?\"})                                      {1, \"\", \"cat: illegal option -- ?~0Ausage: cat [-benstuv] [file ...]~0A\"}", "exec({\"cat\"}, \"foo\")                                     {0, \"foo\", \"\"}", "exec({\"echo\", \"one\", \"two\"})                             {0, \"one two~0A\", \"\"}"}
@prop #123."exp" {} rc
;;#123.("exp") = {"Syntax: exp (FLOAT x)", "", "Returns E (Eulers number) raised to the power of x. "}
@prop #123."generate_json" {} rc
;;#123.("generate_json") = {"Syntax: generate_json (ANY value [, STR mode])", "", "Returns the JSON representation of the MOO value.", "", "MOO supports a richer set of values than JSON allows. The optional mode specifies how this function handles the conversion of MOO values into their JSON representation.", "", "The common subset mode, specified by the literal mode string \"common-subset\", is the default conversion mode. In this mode, only the common subset of types (strings and numbers) are translated with fidelity between MOO types and JSON types. All other types are treated as alternative representations of the string type. This mode is useful for integration with non-MOO applications.", "", "The embedded types mode, specified by the literal mode string \"embedded-types\", adds type information. Specifically, values other than strings and numbers, which carry implicit type information, are converted into strings with type information appended. The converted string consists of the string representation of the value (as if tostr() were applied) followed by the pipe (|) character and the type. This mode is useful for serializing/deserializing objects and collections of MOO values.", "", "generate_json([])                                           =>   \"{}\"", "generate_json([\"foo\" -> \"bar\"])                             =>   \"{\\\"foo\\\":\\\"bar\\\"}\"", "generate_json([\"foo\" -> \"bar\"], \"common-subset\")            =>   \"{\\\"foo\\\":\\\"bar\\\"}\"", "generate_json([\"foo\" -> \"bar\"], \"embedded-types\")           =>   \"{\\\"foo\\\":\\\"bar\\\"}\"", "generate_json([\"foo\" -> 1.1])                               =>   \"{\\\"foo\\\":1.1}\"", "generate_json([\"foo\" -> 1.1], \"common-subset\")              =>   \"{\\\"foo\\\":1.1}\"", "generate_json([\"foo\" -> 1.1], \"embedded-types\")             =>   \"{\\\"foo\\\":1.1}\"", "generate_json([\"foo\" -> #1])                                =>   \"{\\\"foo\\\":\\\"#1\\\"}\"", "generate_json([\"foo\" -> #1], \"common-subset\")               =>   \"{\\\"foo\\\":\\\"#1\\\"}\"", "generate_json([\"foo\" -> #1], \"embedded-types\")              =>   \"{\\\"foo\\\":\\\"#1|obj\\\"}\"", "generate_json([\"foo\" -> E_PERM])                            =>   \"{\\\"foo\\\":\\\"E_PERM\\\"}\"", "generate_json([\"foo\" -> E_PERM], \"common-subset\")           =>   \"{\\\"foo\\\":\\\"E_PERM\\\"}\"", "generate_json([\"foo\" -> E_PERM], \"embedded-types\")          =>   \"{\\\"foo\\\":\\\"E_PERM|err\\\"}\"", "", "JSON keys must be strings, so regardless of the mode, the key will be converted to a string value.", "", "generate_json([1 -> 2])                                     =>   \"{\\\"1\\\":2}\"", "generate_json([1 -> 2], \"common-subset\")                    =>   \"{\\\"1\\\":2}\"", "generate_json([1 -> 2], \"embedded-types\")                   =>   \"{\\\"1|int\\\":2}\"", "generate_json([#1 -> 2], \"embedded-types\")                  =>   \"{\\\"#1|obj\\\":2}\"", "", "tion: value parse_json (str json [, str mode])", "", "Returns the MOO value representation of the JSON string. If the specified string is not valid JSON, E_INVARG is raised.", "", "The optional mode specifies how this function handles conversion of MOO values into their JSON representation. The options are the same as for generate_json().", "", "parse_json(\"{}\")                                            =>   []", "parse_json(\"{\\\"foo\\\":\\\"bar\\\"}\")                             =>   [\"foo\" -> \"bar\"]", "parse_json(\"{\\\"foo\\\":\\\"bar\\\"}\", \"common-subset\")            =>   [\"foo\" -> \"bar\"]", "parse_json(\"{\\\"foo\\\":\\\"bar\\\"}\", \"embedded-types\")           =>   [\"foo\" -> \"bar\"]", "parse_json(\"{\\\"foo\\\":1.1}\")                                 =>   [\"foo\" -> 1.1]", "parse_json(\"{\\\"foo\\\":1.1}\", \"common-subset\")                =>   [\"foo\" -> 1.1]", "parse_json(\"{\\\"foo\\\":1.1}\", \"embedded-types\")               =>   [\"foo\" -> 1.1]", "parse_json(\"{\\\"foo\\\":\\\"#1\\\"}\")                              =>   [\"foo\" -> \"#1\"]", "parse_json(\"{\\\"foo\\\":\\\"#1\\\"}\", \"common-subset\")             =>   [\"foo\" -> \"#1\"]", "parse_json(\"{\\\"foo\\\":\\\"#1|obj\\\"}\", \"embedded-types\")        =>   [\"foo\" -> #1]", "parse_json(\"{\\\"foo\\\":\\\"E_PERM\\\"}\")                          =>   [\"foo\" -> \"E_PERM\"]", "parse_json(\"{\\\"foo\\\":\\\"E_PERM\\\"}\", \"common-subset\")         =>   [\"foo\" -> \"E_PERM\"]", "parse_json(\"{\\\"foo\\\":\\\"E_PERM|err\\\"}\", \"embedded-types\")    =>   [\"foo\" -> E_PERM]", "", "In embedded types mode, key values can be converted to MOO types by appending type information. The full set of supported types are obj, str, err, float and int.", "", "parse_json(\"{\\\"1\\\":2}\")                                     =>   [\"1\" -> 2]", "parse_json(\"{\\\"1\\\":2}\", \"common-subset\")                    =>   [\"1\" -> 2]", "parse_json(\"{\\\"1|int\\\":2}\", \"embedded-types\")               =>   [1 -> 2]", "parse_json(\"{\\\"#1|obj\\\":2}\", \"embedded-types\")              =>   [#1 -> 2]", "", "JSON defines types that MOO (currently) does not support, such as boolean true and false, and null. These values are always converted to the strings \"true\", \"false\" and \"null\". "}
@prop #123."getenv" {} rc
;;#123.("getenv") = {"Syntax: getenv (STR name)", "", "Returns the value of the named environment variable. If no such environment variable exists, 0 is returned. If the programmer is not a wizard, then E_PERM is raised.", "", "getenv(\"HOME\")       =>  \"/home/foobar\"", "getenv(\"XYZZY\")      =>   0"}
@prop #123."mapdelete" {} rc
;;#123.("mapdelete") = {"Syntax: mapdelete (MAP map, ANY key)", "", "Returns a copy of map with the value corresponding to key removed. If key is not a valid key, then E_RANGE is raised.", "", "x = [\"foo\" -> 1, \"bar\" -> 2, \"baz\" -> 3];", "mapdelete(x, \"bar\")       =>  [\"baz\" -> 3, \"foo\" -> 1]"}
@prop #123."mapkeys" {} rc
;;#123.("mapkeys") = {"Syntax: mapkeys (MAP map)", "", "Returns the keys of the elements of map.", "", "x = [\"foo\" -> 1, \"bar\" -> 2, \"baz\" -> 3];", "mapkeys(x)    =>  {\"bar\", \"baz\", \"foo\"}"}
@prop #123."mapvalues" {} rc
;;#123.("mapvalues") = {"Syntax: mapvalues (MAP map)", "", "Returns the values of the elements of map.", "", "x = [\"foo\" -> 1, \"bar\" -> 2, \"baz\" -> 3];", "mapvalues(x)   =>  {2, 3, 1}"}
@prop #123."parse_json" {} rc
;;#123.("parse_json") = {"Syntax: parse_json (STR json [, STR mode])", "", "Returns the MOO value representation of the JSON string. If the specified string is not valid JSON, E_INVARG is raised.", "", "The optional mode specifies how this function handles conversion of MOO values into their JSON representation. The options are the same as for generate_json().", "", "parse_json(\"{}\")                                            =>   []", "parse_json(\"{\\\"foo\\\":\\\"bar\\\"}\")                             =>   [\"foo\" -> \"bar\"]", "parse_json(\"{\\\"foo\\\":\\\"bar\\\"}\", \"common-subset\")            =>   [\"foo\" -> \"bar\"]", "parse_json(\"{\\\"foo\\\":\\\"bar\\\"}\", \"embedded-types\")           =>   [\"foo\" -> \"bar\"]", "parse_json(\"{\\\"foo\\\":1.1}\")                                 =>   [\"foo\" -> 1.1]", "parse_json(\"{\\\"foo\\\":1.1}\", \"common-subset\")                =>   [\"foo\" -> 1.1]", "parse_json(\"{\\\"foo\\\":1.1}\", \"embedded-types\")               =>   [\"foo\" -> 1.1]", "parse_json(\"{\\\"foo\\\":\\\"#1\\\"}\")                              =>   [\"foo\" -> \"#1\"]", "parse_json(\"{\\\"foo\\\":\\\"#1\\\"}\", \"common-subset\")             =>   [\"foo\" -> \"#1\"]", "parse_json(\"{\\\"foo\\\":\\\"#1|obj\\\"}\", \"embedded-types\")        =>   [\"foo\" -> #1]", "parse_json(\"{\\\"foo\\\":\\\"E_PERM\\\"}\")                          =>   [\"foo\" -> \"E_PERM\"]", "parse_json(\"{\\\"foo\\\":\\\"E_PERM\\\"}\", \"common-subset\")         =>   [\"foo\" -> \"E_PERM\"]", "parse_json(\"{\\\"foo\\\":\\\"E_PERM|err\\\"}\", \"embedded-types\")    =>   [\"foo\" -> E_PERM]", "", "In embedded types mode, key values can be converted to MOO types by appending type information. The full set of supported types are obj, str, err, float and int.", "", "parse_json(\"{\\\"1\\\":2}\")                                     =>   [\"1\" -> 2]", "parse_json(\"{\\\"1\\\":2}\", \"common-subset\")                    =>   [\"1\" -> 2]", "parse_json(\"{\\\"1|int\\\":2}\", \"embedded-types\")               =>   [1 -> 2]", "parse_json(\"{\\\"#1|obj\\\":2}\", \"embedded-types\")              =>   [#1 -> 2]", "", "JSON defines types that MOO (currently) does not support, such as boolean true and false, and null. These values are always converted to the strings \"true\", \"false\" and \"null\". "}
@prop #123."process_id" {} rc
;;#123.("process_id") = {"Syntax: process_id ()", "", "Returns the process id of the server. "}
@prop #123."random_bytes" {} rc
;;#123.("random_bytes") = {"Syntax: random_bytes (INT count)", "", "Returns a binary string composed of between one and 10000 random bytes. count specifies the number of bytes and must be a positive integer; otherwise, E_INVARG is raised. "}
@prop #123."read_http" {} rc
;;#123.("read_http") = {"Syntax: read_http (request-or-response [, OBJ conn])", "", "Reads lines from the connection conn (or, if not provided, from the player that typed the command that initiated the current task) and attempts to parse the lines as if they are an HTTP request or response. request-or-response must be either the string \"request\" or \"response\". It dictates the type of parsing that will be done.", "", "Just like read(), if conn is provided, then the programmer must either be a wizard or the owner of conn; if conn is not provided, then read_http() may only be called by a wizard and only in the task that was last spawned by a command from the connection in question. Otherwise, E_PERM is raised. Likewise, if conn is not currently connected and has no pending lines of input, or if the connection is closed while a task is waiting for input but before any lines of input are received, then read_http() raises E_INVARG.", "", "If parsing fails because the request or response is syntactically incorrect, read_http() will return a map with the single key \"error\" and a list of values describing the reason for the error. If parsing succeeds, read_http() will return a map with an appropriate subset of the following keys, with values parsed from the HTTP request or response: \"method\", \"uri\", \"headers\", \"body\", \"status\" and \"upgrade\".", "", "    Fine point: read_http() assumes the input strings are binary strings. When called interactively, as in the example below, the programmer must insert the literal line terminators or parsing will fail. ", "", "The following example interactively reads an HTTP request from the players connection.", "", "read_http(\"request\", player)", "GET /path HTTP/1.1~0D~0A", "Host: example.com~0D~0A", "~0D~0A", "", "In this example, the string ~0D~0A ends the request. The call returns the following (the request has no body):", "", "[\"headers\" -> [\"Host\" -> \"example.com\"], \"method\" -> \"GET\", \"uri\" -> \"/path\"]", "", "The following example interactively reads an HTTP response from the players connection.", "", "read_http(\"response\", player)", "HTTP/1.1 200 Ok~0D~0A", "Content-Length: 10~0D~0A", "~0D~0A", "1234567890", "", "The call returns the following:", "", "[\"body\" -> \"1234567890\", \"headers\" -> [\"Content-Length\" -> \"10\"], \"status\" -> 200]"}
@prop #123."salt" {} rc
;;#123.("salt") = {"Syntax: salt (STR format, STR input)", "", "Generate a crypt() compatible salt string for the specified salt format using the specified binary random input. The specific set of formats supported depends on the libraries used to build the server, but will always include the standard salt format, indicated by the format string \"\" (the empty string), and the BCrypt salt format, indicated by the format string \"$2a$NN$\" (where \"NN\" is the work factor). Other possible formats include MD5 (\"$1$\"), SHA256 (\"$5$\") and SHA512 (\"$6$\"). Both the SHA256 and SHA512 formats support optional rounds.", "", "salt(\"\", \".M\")                                           =>    \"iB\"", "salt(\"$1$\", \"~183~1E~C6/~D1\")                            =>    \"$1$MAX54zGo\"", "salt(\"$5$\", \"x~F2~1Fv~ADj~92Y~9E~D4l~C3\")                =>    \"$5$s7z5qpeOGaZb\"", "salt(\"$5$rounds=2000$\", \"G~7E~A7~F5Q5~B7~0Aa~80T\")       =>    \"$5$rounds=2000$5trdp5JBreEM\"", "salt(\"$6$\", \"U7~EC!~E8~85~AB~CD~B5+~E1?\")                =>    \"$6$JR1vVUSVfqQhf2yD\"", "salt(\"$6$rounds=5000$\", \"~ED'~B0~BD~B9~DB^,\\\\~BD~E7\")    =>    \"$6$rounds=5000$hT0gxavqSl0L\"", "salt(\"$2a$08$\", \"|~99~86~DEq~94_~F3-~1A~D2#~8C~B5sx\")    =>    \"$2a$08$dHkE1lESV9KrErGhhJTxc.\"", "", "Note: To ensure proper security, the random input must be from a sufficiently random source. "}
@prop #123."strtr" {} rc
;;#123.("strtr") = {"Syntax: strtr (STR source, STR str1, STR str2 [, case-matters])", "", "Transforms the string source by replacing the characters specified by str1 with the corresponding characters specified by str2. All other characters are not transformed. If str2 has fewer characters than str1 the unmatched characters are simply removed from source. By default the transformation is done on both upper and lower case characters no matter the case. If case-matters is provided and true, then case is treated as significant.", "", "strtr(\"foobar\", \"o\", \"i\")           =>    \"fiibar\"", "strtr(\"foobar\", \"ob\", \"bo\")         =>    \"fbboar\"", "strtr(\"foobar\", \"\", \"\")             =>    \"foobar\"", "strtr(\"foobar\", \"foba\", \"\")         =>    \"r\"", "strtr(\"5xX\", \"135x\", \"0aBB\", 0)     =>    \"BbB\"", "strtr(\"5xX\", \"135x\", \"0aBB\", 1)     =>    \"BBX\"", "strtr(\"xXxX\", \"xXxX\", \"1234\", 0)    =>    \"4444\"", "strtr(\"xXxX\", \"xXxX\", \"1234\", 1)    =>    \"3434\""}
@prop #123."value_hmac" {} rc
;;#123.("value_hmac") = {"Syntax: value_hmac (value, STR key [, STR algo [, binary]])", "", "Returns the same string as string_hmac(toliteral(value), key, ...); see the description of string_hmac() for details. "}
@prop #123."crypt" {} rc
;;#123.("crypt") = {"Syntax: crypt (STR text [, STR salt])", "", "Encrypts (hashes) the given text using the standard UNIX encryption method. If provided, salt should be a string at least two characters long, and it may dictate a specific algorithm to use. By default, crypt uses the original, now insecure, DES algorithm. Stunt specifically includes the BCrypt algorithm (identified by salts that start with \"$2a$\"), and may include MD5, SHA256, and SHA512 algorithms depending on the libraries used to build the server. The salt used is returned as the first part of the resulting encrypted string.", "", "Aside from the possibly-random input in the salt, the encryption algorithms are entirely deterministic. In particular, you can test whether or not a given string is the same as the one used to produce a given piece of encrypted text; simply extract the salt from the front of the encrypted text and pass the candidate string and the salt to crypt(). If the result is identical to the given encrypted text, then youve got a match.", "", "crypt(\"foobar\", \"iB\")                               =>    \"iBhNpg2tYbVjw\"", "crypt(\"foobar\", \"$1$MAX54zGo\")                      =>    \"$1$MAX54zGo$UKU7XRUEEiKlB.qScC1SX0\"", "crypt(\"foobar\", \"$5$s7z5qpeOGaZb\")                  =>    \"$5$s7z5qpeOGaZb$xkxjnDdRGlPaP7Z ... .pgk/pXcdLpeVCYh0uL9\"", "crypt(\"foobar\", \"$5$rounds=2000$5trdp5JBreEM\")      =>    \"$5$rounds=2000$5trdp5JBreEM$Imi ... ckZPoh7APC0Mo6nPeCZ3\"", "crypt(\"foobar\", \"$6$JR1vVUSVfqQhf2yD\")              =>    \"$6$JR1vVUSVfqQhf2yD$/4vyLFcuPTz ... qI0w8m8az076yMTdl0h.\"", "crypt(\"foobar\", \"$6$rounds=5000$hT0gxavqSl0L\")      =>    \"$6$rounds=5000$hT0gxavqSl0L$9/Y ... zpCATppeiBaDxqIbAN7/\"", "crypt(\"foobar\", \"$2a$08$dHkE1lESV9KrErGhhJTxc.\")    =>    \"$2a$08$dHkE1lESV9KrErGhhJTxc.QnrW/bHp8mmBl5vxGVUcsbjo3gcKlf6\"", "", "Note: The specific set of supported algorithms depends on the libraries used to build the server. Only the BCrypt algorithm, which is distributed with the server source code, is guaranteed to exist. BCrypt is currently mature and well tested, and is recommended for new development."}
@prop #123."argon2" {} rc
;;#123.("argon2") = {"Syntax:   argon2 (STR <password>, STR <salt> [, <iterations> 3] [, <memory usage in KB> 4096] [, <CPU threads> 1] => STR", "", "The function `argon2()' hashes a password using the Argon2id password hashing algorithm. It is parametrized by three optional arguments:", "", " * Time: This is the number of times the hash will get run. This defines the amount of computation required and, as a result, how long the function will take to complete.", " * Memory: This is how much RAM is reserved for hashing.", " * Parallelism: This is the number of CPU threads that will run in parallel.", "", "The salt for the password should, at minimum, be 16 bytes for password hashing. It is recommended to use the random_bytes() function."}
@prop #123."task_local" {} rc
;;#123.("task_local") = {"Syntax: task_local ()", "", "Returns the value associated with the current task. The value is set with the `set_task_local` function."}
@prop #123."set_task_local" {} rc
;;#123.("set_task_local") = {"Syntax: set_task_local(ANY value)", "", "Sets a value that gets associated with the current running task. This value persists across verb calls and gets reset when the task is killed, making it suitable for securely passing sensitive intermediate data between verbs. The value can then later be retrieved using the `task_local` function.", "", "set_task_local(\"arbitrary data\")", "set_task_local({\"list\", \"of\", \"arbitrary\", \"data\"})"}
@prop #123."respond_to" {} rc
;;#123.("respond_to") = {"Syntax: respond_to(OBJ object, STR verb)", "", "Returns true if <verb> is callable on <object>, taking into account inheritance, wildcards (star verbs), etc. Otherwise, returns false.  If the caller is permitted to read the object (because the object's `r' flag is true, or the caller is the owner or a wizard) the true value is a list containing the object number of the object that defines the verb and the full verb name(s).  Otherwise, the numeric value `1' is returned."}
@prop #123."isa" {} rc
;;#123.("isa") = {"Syntax:  isa(OBJ <object>, OBJ <parent>)", "         isa(OBJ <object>, LIST <parent list> [, INT <return_parent>])", "", "Returns true if <object> is a descendant of <parent>, otherwise false.", "", "If a third argument is present and true, the return value will be the first parent that object1 descends from in the <parent list>.", "", "isa(#2, $wiz)                           => 1", "isa(#2, {$thing, $wiz, $container})     => 1", "isa(#2, {$thing, $wiz, $container}, 1)  => #57 (generic wizard)", "isa(#2, {$thing, $room, $container}, 1) => #-1 <$nothing>"}
@prop #123."switch_player" {} rc
;;#123.("switch_player") = {"Syntax: switch_player(OBJ object1, OBJ object2)", "", "Silently switches the player associated with this connection from <object1> to <object2>. <object1> must be connected and <object2> must be a player. This can be used in do_login_command() verbs that read or suspend (which prevents the normal player selection mechanism from", "working."}
@prop #123."stunt" {} rc
;;#123.("stunt") = {"LambdaMOO-Stunt adds the following built-in functions:", "", "binary_hmac", "string_hmac", "value_hmac       - Cryptographically secure HMAC functions.", "decode_base64", "encode_base64    - Encode and decode binary Base64 strings.", "exec             - Execute shell scripts and applications.", "exp              - Return Eulers number (E) to the power of <x>.", "generate_json    - Return the JSON representation of the MOO value.", "parse_json       - Return the MOO value representation of a JSON string.", "getenv           - Return the value of the named environment variable.", "mapdelete        - Delete a key from a map.", "mapkeys          - List the keys in a map.", "mapvalues        - List the values in a map.", "process_id       - Return the process ID of the running server.", "random_bytes     - Return a binary string of <x> bytes.", "read_http        - Parse lines from a network connection as HTTP requests.", "salt             - Generate a cryptographically secure salt string.", "strtr            - Replace characters in a string.", "crypt            - Encrypt a string using a variety of algorithms.", "task_local       - Return values associated with the current task.", "set_task_local   - Set values associated with the current task.", "respond_to       - Check if a verb is callable on an object.", "isa              - Check if an object is a descendant of another object.", "switch_player    - Silently switch a connection to another player.", "", "", "Additionally, the ToastStunt fork adds these:", "", "argon2                - Argon2id secure hashing.", "sqlite                - See HELP SQLITE for a complete list.", "pcre_match            - Match a string using Perl Compatible Regular Expressions.", "pcre_replace          - Replace text in a string using Perl Compatible Regular Expressions.", "frandom               - Random floats.", "distance              - Calculate the distance between an arbitrary number of points.", "relative_heading      - Calculate a relative bearing between two points.", "memory_usage          - Total memory used, resident set size, shared pages, text, data + stack", "ftime                 - Precise time, including an argument for monotonic timing.", "locate_by_name        - Quickly locate objects by their name and aliases.", "usage                 - Returns a list of system information from the operating system.", "explode               - Return a list of substrings of a string separated by a break.", "occupants             - Return a list of objects of parent parent, optionally with a player flag check.", "spellcheck            - Check the spelling of a word using Aspell.", "locations             - Recursive location reporting function.", "clear_ancestor_cache  - Manually clears the ancestor cache.", "simplex_noise         - Generate Simplex Noise.", "threads               - Display a list of active threads.", "thread_info           - Display specific information about a running thread.", "new_waif              - Create a new waif.", "waif_stats            - Display a count of instantiated waifs by class.", "sort                  - Sorts a list by itself or another list of keys. Also support natural ordering and reverse.", "yin                   - Yield if needed. Suspend a task when running out of ticks or seconds.", "slice                 - Makes a new list of the index-th elements of the original list.", "reverse               - Reverse a list.", "recreate              - Create valid objects from invalid objects.", "set_thread_mode       - Enable or disable threading of functions for the current verb.", "chr                   - Translate integers into ASCII characters.", "recycled_objects      - Return a list of all invalid objects in the database.", "next_recycled_object  - Return the first available invalid object.", "all_members           - Return the indices of all instances of an element in a list."}
@prop #123."sqlite_open" {} rc
;;#123.("sqlite_open") = {"Syntax:	  sqlite_open(STR <path to database>, [INT options]) => INT", "", "The function `sqlite_open' will attempt to open the database at <path> for use with SQLite.", "", "The second argument is a bitmask of options. Options are:", "", "	SQLITE_PARSE_OBJECTS [4]:    Determines whether strings beginning with a pound symbol (#) are interpreted as MOO object numbers or not.", "                                     The default is true, which means that any queries that would return a string (such as \"#123\") will be returned as objects.", "	SQLITE_PARSE_TYPES [2]:      If unset, no parsing of rows takes place and only strings are returned.", "	SQLITE_SANITIZE_STRINGS [8]: If set, newlines (\\n) are converted into tabs (\\t) to avoid corrupting the MOO database. Default is unset.", "", "NOTE: If the MOO doesn't support bitmasking, you can still specify options. You'll just have to manipulate the int yourself. e.g. if you want to parse objects and types, arg[2] would be a 6. If you only want to parse types, arg[2] would be 2.", "", "If successful, the function will return the numeric handle for the open database.", "", "If unsuccessful, the function will return a helpful error message.", "", "If the database is already open, a traceback will be thrown that contains the already open database handle."}
@prop #123."sqlite_close" {} rc
;;#123.("sqlite_close") = {"Syntax:	  sqlite_close(INT <database handle) => INT", "", "This function will close an open database.", "", "If successful, return 1;", "", "If unsuccessful, returns E_INVARG."}
@prop #123."sqlite_handles" {} rc
;;#123.("sqlite_handles") = {"Syntax:	  sqlite_handles() => LIST", "", "Returns a list of open SQLite database handles."}
@prop #123."sqlite_info" {} rc
;;#123.("sqlite_info") = {"Syntax:	  sqlite_info(INT <database handle>) => MAP", "", "This function returns a map of information about the database at <handle>", "", "The information returned is:", "	Database Path", "	Type parsing enabled?", "	Object parsing enabled?", "	String sanitation enabled?"}
@prop #123."sqlite_query" {} rc
;;#123.("sqlite_query") = {"Syntax:	  sqlite_query(INT <database handle>, STR <database query> [, INT <threaded>]) => [LIST or STR]", "", "This function will attempt to execute the query given in <query> on the database referred to by <handle>.", "", "On success, this function will return a list identifying the returned rows. If the query didn't return rows but was successful, an empty list is returned.", "", "If the query fails, a string will be returned identifying the SQLite error message.", "", "By default, sqlite_query suspends the in-MOO task and performs the SQLite operation in a separate thread. If this is undesirable, you can supply a 0 as the third argument to disable this functionality and run the SQLite theory in the main MOO thread without suspending the in-MOO task.", "", "WARNING: sqlite_query does NOT use prepared statements and should NOT be used on queries that contain user input."}
@prop #123."sqlite_execute" {} rc
;;#123.("sqlite_execute") = {"Syntax:	  sqlite_execute(INT <database handle>, STR <SQL prepared statement query>, LIST <values> [, INT <threaded>) => [LIST or STR]", "", "This function will attempt to create and execute the prepared statement query given in <query> on the database referred to by <handle> with the values <values>.", "", "On success, this function will return a list identifying the returned rows. If the query didn't return rows but was successful, an empty list is returned.", "", "If the query fails, a string will be returned identifying the SQLite error message.", "", "sqlite_execute uses prepared statements, so it's the preferred function to use for security and performance reasons.", "", "By default, sqlite_execute suspends the in-MOO task and performs the SQLite operation in a separate thread. If this is undesirable, you can supply a 0 as the third argument to disable this functionality and run the SQLite theory in the main MOO thread without suspending the in-MOO task.", "", "Example:", "sqlite_execute(0, \"INSERT INTO users VALUES (?, ?, ?);\", {#7, \"lisdude\", \"Albori Sninvel\"})"}
@prop #123."sqlite_last_insert_row_id" {} rc
;;#123.("sqlite_last_insert_row_id") = {"Syntax:	  sqlite_last_insert_row_id(INT <database handle>)", "", "This function identifies the row ID of the last insert command executed on the database."}
@prop #123."sqlite" {} rc
;;#123.("sqlite") = {"SQLite allows you to store information in locally hosted SQLite databases. The following functions (see HELP <function name> for detailed information) are available:", "", "sqlite_open         Opens an SQLite database.", "sqlite_close        Closes an SQLite database.", "sqlite_handles      Returns a list of open SQLite database handles.", "sqlite_info         Returns information about an open SQLite database.", "sqlite_query        Runs a raw SQL query on the database.", "sqlite_execute      Executes an SQL prepared statement on the database."}
@prop #123."pcre_replace" {} rc
;;#123.("pcre_replace") = {"Syntax:   pcre_replace (STR <subject>, STR <pattern>) => STR", "", "The function `pcre_replace()' replaces <subject> with replacements found in <pattern> using the Perl Compatible Regular Expressions library.", "", "The pattern string has a specific format that must be followed, which should be familiar if you have used the likes of Vim, Perl, or sed. The string is composed of four elements, each separated by a delimiter (typically a slash (/) or an exclaimation mark (!)), that tell PCRE how to parse your replacement. We'll break the string down and mention relevant options below:", "", "1. Type of search to perform. In MOO, only 's' is valid. This parameter is kept for the sake of consistency.", "2. The text you want to search for a replacement.", "3. The regular expression you want to use for your replacement text.", "4. Optional modifiers:", "    g: Global. This will replace all occurances in your string rather than stopping at the first.", "    i: Case-insensitive. Uppercase, lowercase, it doesn't matter. All will be replaced.", "    ", "Examples:", "", "Replace one word with another:", "pcre_replace(\"I like banana pie. Do you like banana pie?\", \"s/banana/apple/g\")", "=> \"I like apple pie. Do you like apple pie?\"", "", "If you find yourself wanting to replace a string that contains slashes, it can be useful to change your delimiter to an exclaimation mark:", "pcre_replace(\"Unix, wow! /bin/bash is a thing.\", \"s!/bin/bash!/bin/fish!g\")", "=> \"Unix, wow! /bin/fish is a thing.\""}
@prop #123."frandom" {} rc
;;#123.("frandom") = {"Syntax:  frandom (FLOAT <mod1> [, FLOAT <mod2>)   => FLOAT", "", "If only one argument is given, a floating point number is chosen randomly from the range `[1.0..<mod1>]` and returned. If two arguments are given, a floating point number is randomly chosen from the range `[<mod1>..<mod2>]`. "}
@prop #123."memory_usage" {} rc
;;#123.("memory_usage") = {"Syntax:  memory_usage ()   => LIST", "", "Return statistics concerning the server's consumption of system memory. The result is a list in the following format:", "", "{total memory used, resident set size, shared pages, text, data + stack}"}
@prop #123."ftime" {} rc
;;#123.("ftime") = {"Syntax:  ftime ([INT monotonic])   => FLOAT", "", "Returns the current time, in milliseconds, represented as the number of seconds that have elapsed since midnight on 1 January 1970, Greenwich Mean Time.", "", "If the <monotonic> argument is supplied and set to 1, the time returned will be monotonic. This means that will you will always get how much time has elapsed from an arbitrary, fixed point in the past that is unaffected by clock skew or other changes in the wall-clock. This is useful for benchmarking how long an operation takes, as it's unaffected by the actual system time.", "", "The general rule of thumb is that you should use ftime() with no arguments for telling time and ftime() with the monotonic clock argument for measuring the passage of time.  "}
@prop #123."locate_by_name" {} rc
;;#123.("locate_by_name") = {"Syntax:  locate_by_name (STR <object name>)   => LIST", "", "This function searches every object in the database for those containing <object name> in their .name property."}
@prop #123."usage" {} rc
;;#123.("usage") = {"Syntax:  usage ()   => LIST", "", "Return statistics concerning the server the MOO is running on. The result is a list in the following format:", "", "{load averages}, user time, system time, page reclaims, page faults, block input ops, block output ops, voluntary context switches, involuntary context switches, signals received"}
@prop #123."explode" {} rc
;;#123.("explode") = {"Syntax:  explode(<subject> [, <break>])   => LIST", "", "Returns a list of substrings of <subject> that are separated by <break>. <break> defaults to a space."}
@prop #123."clear_ancestor_cache" {} rc
;;#123.("clear_ancestor_cache") = {"Syntax:  clear_ancestor_cache()   => none", "", "The ancestor cache contains a quick lookup of all of an object's ancestors which aids in expediant property lookups. This is an experimental feature and, as such, you may find that something has gone wrong. If that's that case, this function will completely clear the cache and it will be rebuilt as-needed."}
@prop #123."locations" {} rc
;;#123.("locations") = {"Syntax:  locations(OBJ <object>)   => LIST", "", "Recursively build a list of an object's location, its location's location, and so forth until finally hitting $nothing.", "", "Example:", "locations(me)", "=> {#20381, #443, #104735}", "", "$string_utils:title_list(locations(me))", "=> \"\\\"Butterknife Ballet\\\" Control Room FelElk, the one-person celestial birther \\\"Butterknife Ballet\\\", and Uncharted Space: Empty Space\""}
@prop #123."spellcheck" {} rc
;;#123.("spellcheck") = {"Syntax:  spellcheck(STR <word>)   => INT or LIST", "", "This function checks the English spelling of <word>. If the spelling is correct, the function will return a 1. If the spelling is incorrect, a LIST of suggestions for correct spellings will be returned instead. If the spelling is incorrect and no suggestions can be found, an empty LIST is returned."}
@prop #123."threads" {} rc
;;#123.("threads") = {"Syntax:  threads()   => LIST", "", "When one or more MOO processes are suspended and working in a separate thread, this function will return a LIST of handlers to those threads. These handlers can then be passed to `thread_info' for more information."}
@prop #123."thread_info" {} rc
;;#123.("thread_info") = {"Syntax:  thread_info(INT <thread handler>)   => LIST", "", "If a MOO task is running in another thread, its thread handler will give you information about that thread. The information returned in a LIST will be:", "", "  English Name: This is the name the programmer of the builtin function has given to the task being executed.", "  Active: 1 or 0 depending upon whether or not the MOO task has been killed. Not all threads cleanup immediately after the MOO task dies."}
@prop #123."waif_stats" {} rc
;;#123.("waif_stats") = {"Syntax:  waif_stats()   => MAP", "", "Returns a MAP of statistics about instantiated waifs. Each waif class will be a key in the MAP and its value will be the number of waifs of that class currently instantiated. Additionally, there is a `total' key that will return the total number of instantiated waifs, and a `pending_recycle' key that will return the number of waifs that have been destroyed and are awaiting the call of their :recycle verb."}
@prop #123."occupants" {} rc
;;#123.("occupants") = {"Syntax:  occupants(LIST <objects> [, OBJ | LIST <parent>, INT <player flag set?>])   => LIST", "", "Iterates through the list of <objects> and returns those matching a specific set of criteria:", "", "1. If only <objects> is specified, the occupants function will return a list of objects with the player flag set.", "2. If the <parent> argument is specified, a list of <objects> descending from <parent> will be returned. If <parent> is a list, <object> must descend from at least one object in the list.", "3. If both <parent> and <player flag set> are specified, occupants will check both that an object is descended from <parent> and also has the player flag set."}
@prop #123."sort" {} rc
;;#123.("sort") = {"Syntax:  sort(LIST <list> [, LIST <keys>, INT <natural sort order?>, INT <reverse>])   => LIST", "", "Sorts <list> either by <keys> or using the list itself. When sorting <list> by itself, you can use an empty list ({}) for <keys> to specify additional optional arguments.", "", "If <natural sort order> is true, strings containing multi-digit numbers will consider those numbers to be a single character. So, for instance, this means that 'x2' would come before 'x11' when sorted naturally because 2 is less than 11. This argument defaults to 0.", "", "If <reverse> is true, the sort order is reversed. This argument defaults to 0.", "", "Examples:", "", "Sort a list by itself:", ">;sort({\"a57\", \"a5\", \"a7\", \"a1\", \"a2\", \"a11\"})", "=> {\"a1\", \"a11\", \"a2\", \"a5\", \"a57\", \"a7\"}", "", "Sort a list by itself with natural sort order:", ">;sort({\"a57\", \"a5\", \"a7\", \"a1\", \"a2\", \"a11\"}, {}, 1)", "=> {\"a1\", \"a2\", \"a5\", \"a7\", \"a11\", \"a57\"}", "", "Sort a list of strings by a list of numeric keys:", ">;sort({\"foo\", \"bar\", \"baz\"}, {123, 5, 8000})", "=> {\"bar\", \"foo\", \"baz\"}"}
@prop #123."yin" {} rc
;;#123.("yin") = {"Syntax:  yin([INT <time>, INT <minimum ticks>, INT <minimum seconds>] )   => INT", "", "Suspend the current task if it's running out of ticks or seconds. This is meant to provide similar functionality to the LambdaCore-based suspend_if_needed verb or manually specifying something like: ticks_left() < 2000 && suspend(0)", "", "Time: How long to suspend the task. Default: 0", "Minimum ticks: The minimum number of ticks the task has left before suspending.", "Minimum seconds: The minimum number of seconds the task has left before suspending."}
@prop #123."slice" {} rc
;;#123.("slice") = {"Syntax:  slice(LIST <alist> [, INT | LIST | STR <index>])   => LIST", "", "Return the <index>-th elements of <alist>. By default, index will be 1. If index is a list of integers, the returned list will have those elements from <alist>. This is the built-in equivalent of LambdaCore's $list_utils:slice verb.", "", "If <alist> is a list of maps, index can be a string indicating a key to return from each map in <alist>.", "", "Examples:", " >slice({{\"z\", 1}, {\"y\", 2}, {\"x\",5}}, 2) => {1, 2, 5}.", " >slice({{\"z\", 1, 3}, {\"y\", 2, 4}}, {2, 1}) => {{1, \"z\"}, {2, \"y\"}}", " >;slice({[\"a\" -> 1, \"b\" -> 2], [\"a\" -> 5, \"b\" -> 6]}, \"a\") => {1, 5}"}
@prop #123."set_thread_mode" {} rc
;;#123.("set_thread_mode") = {"Syntax:  set_thread_mode([INT <mode>])", "", "With no arguments specified, set_thread_mode will return the current thread mode for the verb. A value of 1 indicates that threading is enabled for functions that support it. A value of 0 indicates that threading is disabled and all functions will execute in the main MOO thread, as functions have done in default LambdaMOO since version 1.", "", "If you specify an argument, you can control the thread mode of the current verb. A <mode> of 1 will enable threading and a <mode> of 0 will disable it. You can invoke this function multiple times if you want to disable threading for a single function call and enable it for the rest.", "", "When should you disable threading? In general, threading should be disabled in verbs where it would be undesirable to suspend(). Each threaded function will immediately suspend the verb while the thread carries out its work. This can have a negative effect when you want to use these functions in verbs that cannot or should not suspend, like $sysobj:do_command or $sysobj:do_login_command.", "", "Note that the threading mode affects the current verb only and does NOT affect verbs called from within that verb."}
@prop #123."recreate" {} rc
;;#123.("recreate") = {"Syntax:  recreate(OBJ <old>, OBJ <parent> [, OBJ <owner>])  => OBJ", "", "Recreate invalid object <old> (one that has previously been recycle()ed) as <parent>, optionally owned by <owner>. This has the effect of filling in holes created by recycle() that would normally require renumbering and resetting the maximum object.", "", "The normal rules apply to parent and owner. You either have to own <parent>, <parent> must be fertile, or you have to be a wizard. Similarly, to change <owner>, you should be a wizard. Otherwise it's superfluous."}
@prop #123."toaststunt" {} rc
;;#123.("toaststunt") = {"*forward*", "stunt"}
@prop #123."chr" {} rc
;;#123.("chr") = {"Syntax:  chr(INT <arg>, ...)  => STR", "", "This function translates integers into ASCII characters. Each argument must be an integer between 0 and 255.", "If the programmer is not a wizard, and integers less than 32 are provided, E_INVARG is raised. This prevents control characters or newlines from being written to the database file by non-trusted individuals."}
@prop #123."recycled_objects" {} rc
;;#123.("recycled_objects") = {"Syntax:  recycled_objects()  => LIST", "", "Return a list of all invalid objects in the database. An invalid object is one that has been destroyed with the recycle() function."}
@prop #123."next_recycled_object" {} rc
;;#123.("next_recycled_object") = {"Syntax:  next_recycled_object(OBJ <start>)  => OBJ | INT", "", "Return the lowest invalid object. If <start> is specified, no object lower than <start> will be considered. If there are no invalid objects, this function will return 0."}
@prop #123."all_members" {} rc
;;#123.("all_members") = {"Syntax:  all_members(ANY <value>, LIST <alist>)  => LIST", "", "Returns the indices of every instance of <value> in <alist>.", "", "Example:", ";all_members(\"a\", {\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"}) => {1, 3, 5}"}
